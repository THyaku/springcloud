Bus消息总线：
    一言以蔽之，分布式自动刷新配置功能。
    Spring Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新。
    Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。
    Spring Cloud Bus目前支持RabbitMQ和Kafka。
    Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。
为何被称为总线：
    什么是总线
        在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。
    基本原理
        ConfigClient实例都监听MQ中同一个topic(默认是Spring Cloud Bus)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。


Bus之RabbitMQ环境配置：
    安装Erlang，下载地址：http://erlang.org/download/otp_win64_21.3.exe
    安装RabbitMQ，下载地址：https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.3/rabbitmq-server-3.8.3.exe
    打开cmd进入RabbitMQ安装目录下的sbin目录，如：D:\devSoft\RabbitMQ Scrverk\rabbitmq_server-3.7.14\sbin
    输入以下命令启动管理功能:rabbitmq-plugins enable rabbitmq_management
    这样就可以添加可视化插件。
    访问地址查看是否安装成功：http://localhost:15672/
    输入账号密码并登录：guest guest

设计思想：
    1、利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置（不建议）
    2、利用消息总线触发一个服务端ConfigServer的/bus/refresh端点，而刷新所有客户端的配置（建议）

2 的架构显然更加适合，图—不适合的原因如下：
    打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责。
    破坏了微服务各节点的对等性。
    有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改。





